#  Copyright 2022-Present Autor contributors
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
import abc
import logging
from typing import Dict, List

from autor.flow_configuration.activity_configuration import (
    ActivityConfiguration,
)
from autor.framework.activity_block_callback import ActivityBlockCallback
from autor.framework.activity_context import ActivityContext
from autor.framework.activity_data import ActivityData
from autor.framework.autor_framework_exception import (
    AutorFrameworkValueException,
)
from autor.framework.check import Check
from autor.framework.constants import Status
from autor.framework.context_properties_handler import ContextPropertiesHandler
from autor.framework.context_properties_registry import (
    ContextPropertiesRegistry,
)

output = ContextPropertiesRegistry.output
# pylint: disable-next=redefined-builtin
input = ContextPropertiesRegistry.input


class Activity(abc.ABC):
    """An abstract base class for flow activities.

    Provides an interface for the inheriting activities"""

    def __init__(self):
        # Unique identifier of the activity within a flow. Generated by the framework.
        self.__id: str = None
        # Unique identifier of the activity run. UUID.
        self.__run_id: str = None
        # Activity name read from the Flow Configuration.
        # If not provided, generated by the framework.
        self.__name: str = None
        # The type in the activity decorator and Flow Configuration.
        self.__type: str = None
        # Unique identifier of a flow read from the Flow Configuration.
        self.__flow_id: str = None
        # Unique identifier of a flow run. UUID.
        self.__flow_run_id: str = None
        # Unique identifier of the activity block. Generated by the framework.
        self.__activity_block_id: str = None
        # Unique identifier of the activity block run. UUID.
        self.__activity_block_run_id: str = None
        # Configuration dictionary read from the Flow Configuration.
        self.__configuration: Dict = None
        # A context object for reading context data from flow context.
        self.__context: ActivityContext = None
        # Used for reading/saving properties from/to context.
        self.__context_properties_handler: ContextPropertiesHandler = None
        # Extensions of activity functionality called after activity block.
        self.__activity_block_callbacks: List[ActivityBlockCallback] = []
        # The outcome of the activity
        self.__status: Status = Status.UNKNOWN

    def set_arguments(self, data: ActivityData):
        Check.is_non_empty_string(data.activity_id)
        self.__id = data.activity_id

        Check.is_non_empty_string(data.activity_run_id)
        self.__run_id = data.activity_run_id

        Check.is_non_empty_string(data.flow_id)
        self.__flow_id = data.flow_id

        Check.is_non_empty_string(data.flow_run_id)
        self.__flow_run_id = data.flow_run_id

        Check.is_non_empty_string(data.activity_block_id)
        self.__activity_block_id = data.activity_block_id

        Check.is_non_empty_string(data.activity_block_run_id)
        self.__activity_block_run_id = data.activity_block_run_id

        Check.is_instance_of(data.activity_config, ActivityConfiguration)
        # An object that represents an activities configuration inside Flow Configuration.
        self.__configuration = data.activity_config.configuration

        Check.is_non_empty_string(data.activity_config.name)
        self.__name = data.activity_config.name

        Check.is_non_empty_string(data.activity_type)
        self.__type = data.activity_type

        Check.is_instance_of(data.activity_context, ActivityContext)
        # A context object for reading context data from flow context.
        self.__context = data.activity_context

        Check.is_instance_of(data.output_context_properties_handler, ContextPropertiesHandler)
        # Used for reading/saving properties from/to context.
        self.__context_properties_handler = data.output_context_properties_handler

        # Internal Autor framework info. Not intended to be used by Activity
        # developers. Used for debugging purposes.
        Check.is_non_empty_string(data.action)
        self.__action = data.action


    def print(self):
        # fmt: off
        logging.info("")
        logging.info("   _____________________ ACTIVITY _____________________")
        logging.info(f"   self.id:                         {str(self.id)}")
        logging.info(f"   self.run_id:                     {str(self.run_id)}")
        logging.info(f"   self.name:                       {str(self.name)}")
        logging.info(f"   self.type:                       {str(self.type)}")
        logging.info(f"   self.class:                      {str(self.__class__.__name__)}")
        logging.info(f"   self.status:                     {str(self.status)}")
        logging.info(f"   self.__action                    {str(self.__action)}")
        logging.info(f"   self.flow_id:                    {str(self.flow_id)}")
        logging.info(f"   self.flow_run_id:                {str(self.flow_run_id)}")
        logging.info(f"   self.activity_block_id:          {str(self.activity_block_id)}")
        logging.info(f"   self.activity_block_run_id:      {str(self.activity_block_run_id)}")
        logging.info(f"   self.configuration:              {str(self.configuration)}")
        # fmt: on
        if len(self.activity_block_callbacks) == 0:
            logging.info("   self.activity_block_callbacks:  []")
        else:
            first_callback = True
            for cb_ in self.activity_block_callbacks:
                if first_callback:
                    first_callback = False
                    logging.info(
                        (
                            "   self.activity_block_callbacks:   "
                            + f"{str(cb_.__class__.__name__)} {cb_.run_on}"
                        )
                    )
                else:
                    logging.info(
                        (
                            f"                                    {str(cb_.__class__.__name__)}"
                            + f" {cb_.run_on}"
                        )
                    )

        logging.info("")

    ################################### CONTEXT properties ##################################
    # Context properties are read/written from/to flow context.
    # If decorated with @input, the property is initiated with the value from the flow context.
    # If decorated with @output, the property is written to flow context after run().

    @property
    @output(mandatory=True, type=str)
    def status(self) -> str:
        return self.__status

    @status.setter
    def status(self, n):
        Check.is_status(
            n,
            f"An attempt to set an invalid status {str(n)}. See constants.Status for valid values.",
        )
        Check.is_false(n == Status.ALL, f"{Status.ALL} is not a valid activity status")
        self.__status = n

    ########################## INITIAL properties ##########################
    # Initial properties receive their value when the activity is created
    # in method set_arguments().

    @property
    def id(self) -> str:
        return self.__id

    @property
    def run_id(self) -> str:
        return self.__run_id

    # Activity name. Read from the flow configuration or generated
    # by Autor framework. Should be unique within the activity block.
    @property
    def name(self) -> str:
        return self.__name

    # Activity type. Provided in the activity decorator and
    # Flow Configuration to tie the configuration to the activity.
    @property
    def type(self) -> str:
        return self.__type

    @property
    def flow_id(self) -> str:
        return self.__flow_id

    @property
    def flow_run_id(self) -> str:
        return self.__flow_run_id

    @property
    def activity_block_id(self) -> str:
        return self.__activity_block_id

    @property
    def activity_block_run_id(self) -> str:
        return self.__activity_block_run_id

    @property  # The activity 'configuration' value from Flow Configuration.
    def configuration(self) -> Dict:
        return self.__configuration

    @property
    def context(self) -> ActivityContext:
        return self.__context

    ########################## OPTIONAL properties ##########################
    # Properties that may be set by the activity.

    @property
    def activity_block_callbacks(self) -> List[ActivityBlockCallback]:
        return self.__activity_block_callbacks

    @abc.abstractmethod
    def run(self):
        """
        The logic of the activity to be implemented by the inheriting activities. \
            This method is called
        after all the input properties have been loaded from the context.

        """
        raise AutorFrameworkValueException(
            "run() in class Activity is abstract and should not be called. \
                Override the run() in the inheriting activity."
        )

    def save_properties_to_context(self):
        """
        By default all the output context properties are automatically saved
        into remote context after run() has completed.

        In exceptional cases, when an activity needs to save the properties to the remote
        context BEFORE the run() has ended, it can use this method to do so.
        """
        self.__context_properties_handler.save_output_properties()

    def __str__(self):
        return str(vars(self))


class ActivityException(Exception):
    """Exception that should be raised or extended by the inheriting activities."""
