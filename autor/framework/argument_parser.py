#  Copyright 2022-Present Autor contributors
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
import argparse
import json
import logging

from autor.framework.keys import CommandLineKeys as cln


class CommandlineArgumentParser:
    """
    Command line argument parser for Autor parameters.
    """

    def parse(self):
        """Parses the command-line arguments.

        Returns:
            argparse.Namespace -- The parser with the parsed parameters.
        """
        return self._configure_parser().parse_args()

    # pylint: disable-next=no-self-use
    def _configure_parser(self):
        """Get configured parser.

        Returns:
            argparse.Namespace -- The configured parser.
        """
        parser = argparse.ArgumentParser(description="Autor arguments")

        parser.add_argument(
            # pylint: disable-next=no-member
            "--" + cln.FLOW_CONFIG_URL,
            required=False,
            action="store",
            type=str,
            help="Flow Configuration file URL",
        )

        parser.add_argument(
            # pylint: disable-next=no-member
            "--" + cln.ACTIVITY_BLOCK_ID,
            required=False,
            action="store",
            type=str,
            help="The unique identifier of the activity block within the Flow Configuration",
        )

        parser.add_argument(
            # pylint: disable-next=no-member
            "--" + cln.FLOW_RUN_ID,
            required=False,
            action="store",
            type=str,
            help=(
                "The unique identifier of a flow run."
                + " Generated by Autor if not provided as an argument."
            )
        )

        # An argument type for a list of strings
        def list_of_strings(arg):
            return arg.split(',')

        parser.add_argument(
            # pylint: disable-next=no-member
            "--" + cln.ADDITIONAL_EXTENSIONS,
            required=False,
            action="store",
            type=list_of_strings,
            help=("Extensions that will be loaded in addition to the extensions" +
                  " listed in the flow configuration. The additional extensions" +
                  " have access to BOOTSTRAP state in Autor.",
            )
        )

        def json_string(arg):
            dictData:dict = json.loads(arg)
            return dictData


        parser.add_argument(
            # pylint: disable-next=no-member
            "--" + cln.CUSTOM_DATA,
            required=False,
            action="store",
            type=json_string,
            help=(
                "Custom data/configurations that can be provided to extensions. Format: JSON string."
            )
        )

        return parser
